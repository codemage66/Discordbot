import {
  ContextMenuCommandBuilder,
  EmbedBuilder,
  ApplicationCommandType,
  AttachmentBuilder,
} from "discord.js";
import { chat } from "../modules/gpt-api.js";
import supabase from "../modules/supabase.js";
import { useToken } from "../modules/loadbalancer.js";
import { isPremium } from "../modules/premium.js";
import delay from "delay";
import { Configuration, OpenAIApi } from "openai";

export default {
  cooldown: null,
  data: new ContextMenuCommandBuilder()
    .setName("Check if is generated by AI")
    .setType(ApplicationCommandType.Message),
  async execute(interaction, client, commands, commandType, options) {
    var token = await useToken("chatgpt");
    await commandType.load(interaction);

    if (!token) {
      await commandType.reply(interaction, {
        content: `We are reaching our capacity limits right now. \nFor more information join our discord: [dsc.gg/turing](https://dsc.gg/turing)`,
      });
    } else {
      const configuration = new Configuration({
        apiKey: token.key,
      });
      var c: any = new OpenAIApi(configuration);
      var response = await c.createCompletion({
        model: "model-detect-v2",
        prompt: interaction.targetMessage.content,
        n: 1,
        temperature: 1,
        max_tokens: 1,
        logprobs: 5,
        top_p: 1,
        stream: false,
        stop: "\n",
      });
      var res = await format(response.data, false);
      await commandType.reply(interaction, {
        content: `The classifier considers the text to be very **${
          res.word
        }(${Math.floor(res.topProb[res.word])}%)** AI-generated.`,
      });
    }
  },
};

function format(response: any, allProbs: any) {
  var classes = { "!": "unlikely", '"': "possibly" };
  const choices = response.choices[0];
  const logprobs = choices.logprobs.top_logprobs[0];
  const probs = Object.fromEntries(
    Object.entries(logprobs).map(([key, value]) => [
      key,
      100 * Math.exp(value as number),
    ])
  );
  const topProb = {
    [classes[choices.text]]: 100 * Math.exp(choices.logprobs.token_logprobs[0]),
  };
  if (allProbs) {
    return { probs, topProb, word: classes[choices.text] };
  }
  return { topProb, word: classes[choices.text] };
}
